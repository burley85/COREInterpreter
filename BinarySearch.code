program
    initArray(ref array, size){
        array = input();
        int i;
        i = size - 2;
        while 0 <= i {
            array = new class;
            array = input();
            i = i - 1;
        }
    }

    getValAtIndex(ref index, array){
        ref val;
        val = share array + index;
        index = val;
    }

    outputArray(ref array, size){
        int i;
        i = 0;
        while i < size {
            ref val;
            val = new class;
            val = i;
            begin getValAtIndex(val, array);
            output(val);
            i = i + 1;
        }
    }

    divideByTwo(ref d){
        int start;
        start = d;
        while start <= (d * 2) - 1 {
            d = d - 1;
        }
    }

    BinarySearch(ref array, startIndex, endIndex, val){
        if startIndex == endIndex then {
            ref i;
            i = new class;
            i = startIndex;
            begin getValAtIndex(i, array);
            if i == val then {
                output(startIndex);
            }
        } else {
            int i, j;
            i = startIndex;
            j = endIndex;
            while i < j{
                i = i + 1;
                j = j - 1;
            }
            ref midIndex;
            midIndex = new class;
            midIndex = j;
            begin BinarySearch(array, startIndex, midIndex, val);
            midIndex = midIndex + 1;
            begin BinarySearch(array, midIndex, endIndex, val);
        }

    }
    
begin
    ref array, size, val;
    size = new class;
    val = new class;
    val = input();
    size = input();
    array = new class;
    begin initArray(array, size);
    ref start, fin;
    start = new class;
    fin = new class;
    start = 0;
    fin = size - 1;
    begin BinarySearch(array, start, fin, val);

end